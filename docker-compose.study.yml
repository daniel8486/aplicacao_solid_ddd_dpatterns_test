services: 
  backend_app:
    build: ./backend
    container_name: backend_app_container
    working_dir: /usr/src/app
    volumes:
      - ./backend:/usr/src/app
    ports:
      - "4000:4000"
    #env_file:
    #  - ./backend/.env
    environment:
      DATABASE_URL: "postgresql://postgres:EstudoTeste2025@postgres:5432/backend"
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: backend
      DB_USER: postgres
      DB_PASSWORD: "EstudoTeste2025"
      JWT_SECRET: "MinhaJWTSecretSuperForte"
    depends_on:
      - postgres
    networks:
      - backend
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
  postgres:
    image: postgres:latest
    container_name: postgres_db_container
    #env_file:
    #  - ./backend/.env
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: "EstudoTeste2025"
      POSTGRES_DB: backend
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  prometheus:
    image: prom/prometheus
    container_name: prometheus_container
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - backend

  grafana:
    image: grafana/grafana
    container_name: grafana_container
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: "Admin2025"
      GF_USERS_ALLOW_SIGN_UP: "false"
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - backend

  loki:
    image: grafana/loki:latest
    container_name: loki_container
    ports:
      - "3100:3100"
    command: ["-config.file=/etc/loki/local-config.yaml"]
    volumes:
      - loki_data:/loki
    networks:
      - backend

  postgres_exporter:
    image: prometheuscommunity/postgres-exporter
    container_name: postgres_exporter_container
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:EstudoTeste2025@postgres:5432/backend?sslmode=disable"
    ports:
      - "9187:9187"
    networks:
      - backend
    depends_on:
      - postgres

  # cadvisor:
  #   image: gcr.io/google-containers/cadvisor:latest
  #   container_name: cadvisor
  #   ports:
  #     - "9323:9323"
  #   volumes:
  #     - /:/rootfs:ro
  #     - /var/run:/var/run:ro
  #     - /sys:/sys:ro
  #     - /var/lib/docker/:/var/lib/docker:ro
  #   networks:
  #     - backend

  promtail:
    image: grafana/promtail:latest
    container_name: promtail_container
    volumes:
      - ./promtail/promtail-config.yml:/etc/promtail/config.yml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/log:/var/log:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - backend
  
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n
    restart: unless-stopped
    ports:
      - "5678:5678"
    environment:
      - N8N_HOST=localhost
      - N8N_PROTOCOL=http
      - WEBHOOK_TUNNEL_URL=http://localhost
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=user
      - N8N_BASIC_AUTH_PASSWORD=user123
      - N8N_TIMEZONE=America/Sao_Paulo
    volumes:
      - n8n_data:/home/node/.n8n
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - ./backend/bkp_db:/bkp_db 
      - /var/run/docker.sock:/var/run/docker.sock 
    networks:
      - backend

volumes:
  postgres_data:
  grafana_data:
  prometheus_data:
  loki_data:
  n8n_data:

networks:
  backend:
    driver: bridge
